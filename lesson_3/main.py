# sp = [] #sp = list()
# sp = [11, 88, 99.77, "Hello", True, 15.05, False]

# sp.append("append")
# sp.insert(0,'null')
# sp.extend([7,8])
#print(sp)
# for i in range(len(sp)):
#     print(sp[i])
# for item in sp:
#     print(item)
# for i, value in enumirate(sp):
#     print(f"{i} - {value}")
# print(7 in sp)
# print(10 in sp)
# print(len(sp))
# a = sp.pop()
# print(a)
# print(sp)
# sp.remove(True)
# del sp(0)
# print(sp)
# t = tuple(sp)
# print(t)
# d = {'петр': 2412344} # d = dict()
# d['ваня'] = 321321
# d['вася'] = 322221
# print(d)
# for i in d:
#     print(i)
# for key, value in d.item():
#     print(f"{key} - {value}")
# print(d.keys())
# print(d.values())
# s = {7,7,7,7,7,7,1,2,3}  # s = set()
# s.add(10)
# s.discard(7)
# print(s) 


# Задача №17. Решение в группах Дан список чисел. Определите, сколько в нем встречается различных чисел. Input: [1, 1, 2, 0, -1, 3, 4, 4] Output: 6

# l = [1, 1, 2, 0, -1, 3, 4, 4]
# s = set(l)
# print(len(s))






# Задача №19. Решение в группах Дана последовательность из N целых чисел и число K. Необходимо сдвинуть всю последовательность
# (сдвиг - циклический) на K элементов вправо,  K – положительное число. Input:   [1, 2, 3, 4, 5] k = 2 Output:  [4, 5, 1, 2, 3]

# p = [1, 2, 3, 4, 5 ]
# k = int(input("Введите шаг сдвига: "))
# t = 0
# if k >= 0: 
#     for i in range(k):
#         t = p.pop()
#         p.insert(0, t)
# else:
#     for i in range(k, 0):
#         # t = p[0]
#         # del p [0]
        
#         p.append(p.pop(0))
# print(p)

# list = [1, 2, 3, 4, 5]
# # k = int(input("Введите размер сдвига: ")) % len(list)
# # print(f"{list[-k:] + list[:k+1]}")
# print(f"{list[::-1]}")

# Задача №21. Решение в группах Напишите программу для печати всех уникальных значений в словаре. Input:  [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"}, {"VII": " S005 "}, {" V ":" S009 "}, {" VIII ":" S007 "}] Output: {'S005', 'S002', 'S007', 'S001', 'S009'} 
# Примечание: Список словарей задан изначально. Пользователь его не вводит

# s = [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"}, {"VII": " S005 "}, {" V ":" S009 "}, {" VIII ":" S007 "}]
# res = set()
# for i in s:
#     print(i.values)
#     for j in i:
#         res.add (i[j].strip())
# print(res)
    




# Задача НЕГАФИБОНАЧЧИ по желанию

# Задайте число. Составьте список чисел Фибоначчи, в том числе для отрицательных индексов.

# Пример:

# для k = 9 список будет выглядеть так: [-21 ,13, -8, 5, −3, 2, −1, 1, 0, 1, 1, 2, 3, 5, 8, 13, 21] [Негафибоначчи]​
# 1

# number = int (input("Введите натуральное число: "))
# fibbo = [1, 0, 1]
# if number == 1:
#     print(0)
# else:
#     for i in range(number-2):
#         fibbo.insert(0, -1**i * (fibbo[0] - fibbo[1]))
#         fibbo.append(fibbo[-1] + fibbo[-2])
#     print(fibbo)

# задача Де моргана необязательная Тут вам пригодятся библиотеки random и time Напишите программу для. проверки истинности утверждения ¬(X ⋁ Y ⋁ Z) = ¬X ⋀ ¬Y ⋀ ¬Z для всех значений предикат.​теперь надо проверить ее практически в цикле 100 раз прогоняем каждый раз генерируем случайное количество предикат от 3 до 15 и конечно со случайным булевым значением и засекаем общее время выполнения программы юзаем библиотеки random и time предикаты НЕ ЗАДАЕМ как целое число!
# например, при первом эксперименте количество предикат сгенерировалось равным 4
# тогда получили 4 предикаты со случайным значением и например это [True, False, False, True]
# проверили равенство левой части и правой части теоремы де Моргана применительно к этим предикатам, если все ок, то переходим к другому эксперименту, если теорема нарушается, то вывести всю информацию об этом

# в конце написать сколько времени отработал ваш код.




